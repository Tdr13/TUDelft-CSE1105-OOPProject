package commons;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class CardTest {

    private Card card;
    private List<Tag> tags = new ArrayList<>();
    private List<SubTask> subtasks = new ArrayList<>();

    private Listing listing;

    @BeforeEach
    void setUp() {
        Tag tag1 = new Tag("tag1");
        tags.add(tag1);
        Tag tag2 = new Tag("tag2");
        tags.add(tag2);

        SubTask s1 = new SubTask("s1",card);
        subtasks.add(s1);

        SubTask s2 = new SubTask("s2",card);
        subtasks.add(s2);

        Date dueDate = new Date();

        listing = new Listing("list",null);

        card = new Card("desc","name",dueDate,tags,subtasks,listing,"","","");
    }

    @Test
    void getCardId() { // the id is autogenerated
    }

    @Test
    void getDescription() {
        assertEquals("desc", card.getDescription());
    }

    @Test
    void setDescription() {
        card.setDescription("desc2");
        assertEquals("desc2",card.getDescription());
    }

    @Test
    void getName() {
        assertEquals("name",card.getName());
    }

    @Test
    void setName() {
        card.setName("name2");
        assertEquals("name2",card.getName());
    }

    @Test
    void getDueDate() {
        assertNotNull(card.getDueDate());
    }

    @Test
    void setDueDate() {
        Date dueDate2 = new Date();
        card.setDueDate(dueDate2);
        assertEquals(dueDate2, card.getDueDate());
    }

    @Test
    void getTags() {
        assertEquals(tags,card.getTags());
    }

    @Test
    void setTags() {
        List<Tag> newTags = new ArrayList<>();

        Tag tag1 = new Tag("tag1");
        newTags.add(tag1);

        Tag tag2 = new Tag("tag2");
        newTags.add(tag2);

        Tag tag3 = new Tag("tag3");
        newTags.add(tag3);

        card.setTags(newTags);
        assertEquals(newTags,card.getTags());
    }

    @Test
    void getSubTasks() {
        assertEquals(subtasks, card.getSubTasks());
    }

    @Test
    void setSubTasks() {
        List<SubTask> newSubtasks = new ArrayList<>();

        SubTask s1 = new SubTask("s1",card);
        newSubtasks.add(s1);

        SubTask s2 = new SubTask("s2",card);
        newSubtasks.add(s2);

        SubTask s3 = new SubTask("s3",card);

        card.setSubTasks(newSubtasks);
        assertEquals(newSubtasks, card.getSubTasks());
    }

    @Test
    void isComplete() {
        assertFalse(card.isComplete());
    }

    @Test
    void setComplete() {
        card.setComplete(true);
        assertTrue(card.isComplete());
    }

    @Test
    void getList(){
        assertEquals(listing,card.getList());
    }

    @Test
    void setList() {
        Listing list2 = new Listing("list",null);
        card.setList(list2);
        assertEquals(list2, card.getList());
    }

    @Test
    void testEquals() {
        Card card1 = new Card("desc", "card", new Date(), tags, subtasks, listing,"","","");
        Card card2 = new Card("desc", "card", new Date(), tags, subtasks, listing,"","","");
        assertTrue(card1.equals(card2, false));
    }

    @Test
    void testNotEquals(){
        Card card1 = new Card("desc", "card", new Date(), tags, subtasks, listing,"","","");
        Card card2 = new Card(null, "card", new Date(), tags, subtasks, listing,"","","");
        assertTrue(card1.equals(card2, false) == false);
    }

    @Test
    void testHashCode() {
        Card card1 = new Card("desc", "card", new Date(), tags, subtasks, listing,"","","");
        Card card2 = new Card("desc", "card", new Date(), tags, subtasks, listing,"","","");
        assertEquals(card1.hashCode(),card2.hashCode());
    }
}