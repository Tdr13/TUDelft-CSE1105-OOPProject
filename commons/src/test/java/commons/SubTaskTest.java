package commons;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Date;

import static org.junit.jupiter.api.Assertions.*;

class SubTaskTest {

    SubTask subtask;
    Card card;
    Date dueDate;

    @BeforeEach
    void setUp() {
        this.dueDate = new Date();
        Board board = new Board("title", "accessKey", "password");
        Listing listing = new Listing("title", board);
        this.card = new Card("desc", "name", dueDate, new ArrayList<>(), new ArrayList<>(), listing, "", "", "");

        this.subtask = new SubTask("subtask", card);
    }

    @Test
    void getStId() { // the id is autogenerated
    }

    @Test
    void setStId() {
        subtask.setStId(222);
        assertEquals(222, subtask.getStId());
    }

    @Test
    void getTitle() {
        assertEquals("subtask",subtask.getTitle());
    }

    @Test
    void setTitle() {
        subtask.setTitle("subtask2");
        assertEquals("subtask2",subtask.getTitle());
    }

    @Test
    void isDone() {
        assertFalse(subtask.isDone());
    }

    @Test
    void setDone() {
        subtask.setDone(true);
        assertTrue(subtask.isDone());
    }

    @Test
    void getCard() {
        assertEquals(card, subtask.getCard());
    }

    @Test
    void setCard() {
        Board board = new Board("title", "accessKey", "password");
        Listing listing = new Listing("title", board);
        Card card2 = new Card("desc","name2", dueDate,new ArrayList<>(),new ArrayList<>(),listing,"","","");

        subtask.setCard(card2);
        assertEquals(card2, subtask.getCard());
    }

    @Test
    void testEquals() {
        Board board = new Board("title", "accessKey", "password");
        Listing listing = new Listing("title", board);
        Card card2 = new Card("desc", "name2", dueDate, new ArrayList<>(), new ArrayList<>(), listing, "", "", "");
        SubTask subtask2 = new SubTask("subtask", card2);

        assertEquals(subtask, subtask2);
    }

    @Test
    void testNotEquals() {
        Board board = new Board("title", "accessKey", "password");
        Listing listing = new Listing("title", board);
        Card card2 = new Card("desc", "name", dueDate, new ArrayList<>(), new ArrayList<>(), listing, "", "", "");
        SubTask subtask2 = new SubTask("subtask2", card2);

        assertNotEquals(subtask, subtask2);
    }

    @Test
    void testHashCode() {
        Board board = new Board("title", "accessKey", "password");
        Listing listing = new Listing("title", board);
        Card card2 = new Card("desc", "name", dueDate, new ArrayList<>(), new ArrayList<>(), listing, "", "", "");
        SubTask subtask2 = new SubTask("subtask", card2);

        assertEquals(subtask2.hashCode(), subtask.hashCode());
    }
}